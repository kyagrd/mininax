data N r = Z | S r ;
zero = In 0 Z ;
succ = \n -> In 0 (S n) ;

data V a r : { Mu N } -> * where
  { VN : V a r { `zero }
  ; VC : a -> r { n } -> V a r { `succ n }
  } ;
vnil = In 1 VN ;
vcons = \x -> \xs -> In 1 (VC x xs) ;

-- -- TODO kind polymorphism TODO
data Envr r : ({st} -> *) -> { Mu(V st) {n} } -> * where
  { Empty  : Envr r res {`vnil}
  -- ; Extend : res {x} -> r res {xs} -> Envr r res {`vcons x xs}
  } ;
empty = In 1 Empty ;
-- extend = \x -> \xs -> In 1 (Extend x xs) ;

-- Usage example
data St = Read | Write ;

data Res : {St} -> * where
  { File1 : Res {Read}
  ; File2 : Res {Write}
  } ;

-- |myenv : Env Res {`vCons Read (`vCons Write{-"~"-}`vNil)}|
-- myenv = extend File1 (extend File2 empty) ;

-- Environments additionaly index by singleton natural numbers
data SN r : {Mu N} -> * where
  { Szer : SN r {`zero}
  ; Ssuc : r {n} -> SN r {`succ n}
  } ;
szer = In 1 Szer ;
ssuc = \n -> In 1 (Ssuc n);

-- -- TODO kind polymorphism TODO
data Envr' r : ({st} -> *) -> { Mu SN {n} } -> { Mu(V st) {n} } -> * where
  { Empty'  : Envr' r res {`szer} {`vnil}
  -- ; Extend' : res {x} -> r res {n} {xs} -> Envr' r res {`ssuc n} {`vcons x xs}
  } ;
-- |myenv' : Env' Res {`ssuc(`ssuc `szer)} {`vCons Read (`vCons Write{-"~"-}`vNil)}|
-- myenv' = extend' File1 (extend' File2 empty')
